!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function r(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=t.props||{},o=n.props||{};Object.keys(r).forEach((function(t){var n=r[t],i=o[t];if(n!==i)if("on"===t.slice(0,2)){var l=t.toLowerCase().slice(2);e.addEventListener(l,n),i&&e.removeEventListener(l,i)}else"value"===t||"checked"===t?e[t]=n:"children"!==t&&("className"===t?e.setAttribute("class",n):e.setAttribute(t,n))})),Object.keys(o).forEach((function(t){var n=r[t],i=o[t];if(!n)if("on"===t.slice(0,2)){var l=t.toLowerCase().slice(2);e.removeEventListener(l,i)}else"children"!==t&&e.removeAttribute(t)}))}function o(e){var t=null;return"text"===e.type?t=document.createTextNode(e.props.textContent):r(t=document.createElement(e.type),e),t._virtualDOM=e,e.children.forEach((function(e){a(e,t)})),e.props&&e.props.ref&&e.props.ref(t),t}function i(e){var t=e._virtualDOM;if("text"!==t.type){var n=t.component;if(n&&n.componentWillUnmount(),t.props&&t.props.ref&&t.props.ref(null),Object.keys(t.props).forEach((function(n){if("on"===n.slice(0,2)){var r=n.toLowerCase().slice(0,2),o=t.props[n];e.removeEventListener(r,o)}})),e.childNodes.length>0)for(var r=0;r<e.childNodes.length;r++)i(e.childNodes[r]),r--;e.remove()}else e.remove()}function l(e,t,n){var r=o(e);n?t.insertBefore(r,n):t.appendChild(r),n&&i(n);var l=e.component;l&&l.setDOM(r)}function c(e){return e&&"function"==typeof e.type}function u(e,t,n){var r=null,o=null;!function(e){var t=e.type;return t&&c(e)&&!(t.prototype&&t.prototype.render)}(e)?(r=function(e){var t=new e.type(e.props||{}),n=t.render();return n.component=t,n}(e),o=r.component):r=function(e){return e.type(e.props||{})}(e),c(r)?u(r,t,n):l(r,t,n),o&&(o.componentDidMount(),o.props&&o.props.ref&&o.props.ref(o))}function a(e,t,n){c(e)?u(e,t,n):l(e,t,n)}function p(e,t,n,r){!function(e,t){return t&&e.type===t.constructor}(e,t)?a(e,r,n):function(e,t,n,r){if(t.componentWillReceiveProps(e.props),t.shouldComponentUpdate(e.props)){var o=t.props;t.componentWillUpdate(e.props),t.updateProps(e.props);var i=t.render();i.component=t,f(i,r,n),t.componentDidUpdate(o)}}(e,t,n,r)}function f(e,t,n){var l=n&&n._virtualDOM,c=l&&l.component;if(n){if(e.type!==l.type&&"function"!=typeof e.type){var u=o(e);n.parentNode.replaceChild(u,n)}else if("function"==typeof e.type)p(e,c,n,t);else if(l&&e.type===l.type){"text"===e.type?function(e,t,n){e.props.textContent!==t.props.textContent&&(n.textContent=e.props.textContent,n._virtualDOM=e)}(e,l,n):r(n,e,l);for(var s={},d=0,v=n.childNodes.length;d<v;d++){var y=n.childNodes[d];if(1===y.nodeType){var m=y.getAttribute("key");m&&(s[m]=y)}}var h=0===Object.keys(s).length;h?e.children.forEach((function(e,t){f(e,n,n.childNodes[t])})):e.children.forEach((function(e,t){var r=e.props.key;if(r){var o=s[r];o?n.childNodes[t]&&n.childNodes[t]!==o&&n.insertBefore(o,n.childNodes[t]):a(e,n,n.childNodes[t])}}));var b=n.childNodes;if(b.length>e.children.length)if(h)for(var E=b.length-1;E>e.children.length-1;E--)i(b[E]);else for(var k=0;k<b.length;k++){for(var g=b[k],O=g._virtualDOM.props.key,C=!1,j=0;j<e.children.length;j++)if(O===e.children[j].props.key){C=!0;break}C||i(g)}}}else a(e,t)}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(o=r.key,i=void 0,i=function(e,t){if("object"!==s(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!==s(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===s(i)?i:String(i)),r)}var o,i}n.r(t);var v={createElement:function e(t,n){for(var r,o=arguments.length,i=new Array(o>2?o-2:0),l=2;l<o;l++)i[l-2]=arguments[l];var c=(r=[]).concat.apply(r,i).reduce((function(t,n){return!1!==n&&!0!==n&&null!==n&&(n instanceof Object?t.push(n):t.push(e("text",{textContent:n}))),t}),[]);return{type:t,props:Object.assign({children:c},n),children:c}},render:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t.firstChild;f(e,t,n)},Component:function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.props=t}var t,n,r;return t=e,(n=[{key:"setState",value:function(e){this.state=Object.assign({},this.state,e);var t=this.render(),n=this.getDOM();f(t,n.parentNode,n)}},{key:"setDOM",value:function(e){this._dom=e}},{key:"getDOM",value:function(){return this._dom}},{key:"updateProps",value:function(e){this.props=e}},{key:"componentWillMount",value:function(){}},{key:"componentDidMount",value:function(){}},{key:"componentWillReceiveProps",value:function(e){}},{key:"shouldComponentUpdate",value:function(e,t){return e!=this.props||t!=this.state}},{key:"componentWillUpdate",value:function(e,t){}},{key:"componentDidUpdate",value:function(e,t){}},{key:"componentWillUnmount",value:function(){}}])&&d(t.prototype,n),r&&d(t,r),Object.defineProperty(t,"prototype",{writable:!1}),e}()};function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(o=r.key,i=void 0,i=function(e,t){if("object"!==y(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!==y(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===y(i)?i:String(i)),r)}var o,i}function b(e,t,n){return t&&h(e.prototype,t),n&&h(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function E(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&k(e,t)}function k(e,t){return(k=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function g(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=j(e);if(t){var o=j(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return O(this,n)}}function O(e,t){if(t&&("object"===y(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return C(e)}function C(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function j(e){return(j=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var S=document.getElementById("root");v.createElement("div",{className:"container"},v.createElement("h1",null,"你好 Tiny React"),v.createElement("h2",{"data-test":"test"},"(编码必杀技)"),v.createElement("div",null,"嵌套1 ",v.createElement("div",null,"嵌套 1.1")),v.createElement("h3",null,"(观察: 这个将会被改变)"),!1,v.createElement("div",null,"2"),v.createElement("span",null,"这是一段内容"),v.createElement("button",{onClick:function(){return alert("你好")}},"点击我"),v.createElement("h3",null,"这个将会被删除"),"2, 3",v.createElement("input",{type:"text",value:"13"})),v.createElement("div",{className:"container"},v.createElement("h1",null,"你好 Tiny React"),v.createElement("h2",{"data-test":"test123"},"(编码必杀技)"),v.createElement("div",null,"嵌套1 ",v.createElement("div",null,"嵌套 1.1")),v.createElement("h3",null,"(观察: 这个将会被改变)"),!1,v.createElement("div",null,"2"),v.createElement("button",{onClick:function(){return alert("你好!!!!!")}},"点击我"),v.createElement("input",{type:"text",value:"13"}));var w=function(e){E(n,e);var t=g(n);function n(e){var r;return m(this,n),(r=t.call(this,e)).state={title:"Default Title"},r.handleClick=r.handleClick.bind(C(r)),r}return b(n,[{key:"handleClick",value:function(){this.setState({title:"Changed Title"})}},{key:"componentWillReceiveProps",value:function(e){console.log("componentWillReceiveProps")}},{key:"componentWillUpdate",value:function(){console.log("componentWillUpdate")}},{key:"componentDidUpdate",value:function(){console.log("componentDidUpdate")}},{key:"render",value:function(){return v.createElement("div",null,this.props.name,this.props.age,v.createElement("div",null,this.state.title,v.createElement("button",{onClick:this.handleClick},"改变Title")))}}]),n}(v.Component),P=function(e){E(n,e);var t=g(n);function n(e){var r;return m(this,n),(r=t.call(this,e)).handleClick=r.handleClick.bind(C(r)),r}return b(n,[{key:"handleClick",value:function(){console.log(this.input),console.log(this.alert)}},{key:"componentDidMount",value:function(){console.log("componentDidMount")}},{key:"componentWillUnmount",value:function(){console.log("componentWillUnmount")}},{key:"render",value:function(){var e=this;return v.createElement("div",null,v.createElement("input",{type:"text",ref:function(t){return e.input=t}}),v.createElement("button",{onClick:this.handleClick},"按钮"),v.createElement(w,{ref:function(t){return e.alert=t},name:"张三",age:20}))}}]),n}(v.Component),x=function(e){E(n,e);var t=g(n);function n(e){var r;return m(this,n),(r=t.call(this,e)).state={persons:[{id:1,name:"张三"},{id:2,name:"李四"},{id:3,name:"王五"},{id:4,name:"赵六"}]},r.handleClick=r.handleClick.bind(C(r)),r}return b(n,[{key:"handleClick",value:function(){var e=JSON.parse(JSON.stringify(this.state));e.persons.pop(),this.setState(e)}},{key:"render",value:function(){return v.createElement("div",null,v.createElement("ul",null,this.state.persons.map((function(e){return v.createElement("li",{key:e.id},e.name,v.createElement(P,null))}))),v.createElement("button",{onClick:this.handleClick},"按钮"))}}]),n}(v.Component);v.render(v.createElement(x,null),S)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,